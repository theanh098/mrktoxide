// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address     String  @id @db.VarChar
  is_new_user Boolean @default(true)

  @@map("user")
}

model Collection {
  address      String        @id @db.VarChar
  name         String        @db.VarChar
  symbol       String        @db.VarChar
  supply       Int           @default(1)
  royalty      Decimal?      @db.Decimal(90, 2)
  image        String?       @db.VarChar
  banner       String?       @db.VarChar
  description  String?       @db.VarChar
  socials      Json?
  Nfts         Nft[]
  Transactions Transaction[]

  @@map("collection")
}

model Nft {
  id            Int           @id @default(autoincrement())
  token_address String        @db.VarChar
  token_id      String        @db.VarChar
  name          String?       @db.VarChar
  token_uri     String        @db.VarChar
  owner_address String?       @db.VarChar
  image         String?       @db.VarChar
  description   String?       @db.VarChar
  Collection    Collection    @relation(fields: [token_address], references: [address])
  Activities    NftActivity[]
  Traits        NftTrait[]
  Offers        NftOffer[]
  Listing       ListingNft?

  @@unique([token_address, token_id])
  @@index([token_address, token_id])
  @@index([token_address])
  @@map("nft")
}

model ListingNft {
  id                        Int          @id @default(autoincrement())
  tx_hash                   String       @db.VarChar
  created_date              DateTime     @db.Timestamptz(3)
  nft_id                    Int          @unique
  collection_address        String       @db.VarChar
  sale_type                 SaleType
  seller_address            String       @db.VarChar
  price                     Decimal      @db.Decimal(90, 2)
  start_date                DateTime?    @db.Timestamptz(3) // available when sale_type is auction
  end_date                  DateTime?    @db.Timestamptz(3) // available when sale_type is auction
  min_bid_increment_percent Decimal?     @db.Decimal(90, 2) // available when sale_type is auction
  denom                     String       @db.VarChar
  market                    Marketplace  @default(mrkt)
  expiration_time           Int?
  Nft                       Nft          @relation(fields: [nft_id], references: [id])
  Biddings                  NftBidding[]

  @@map("listing_nft")
}

model NftActivity {
  id             Int             @id @default(autoincrement())
  tx_hash        String          @db.VarChar
  seller_address String?         @db.VarChar
  buyer_address  String?         @db.VarChar
  date           DateTime        @db.Timestamptz(3)
  price          Decimal         @db.Decimal(90, 2)
  denom          String          @db.VarChar
  event_kind     NftActivityKind
  market         Marketplace     @default(mrkt)
  metadata       Json
  nft_id         Int
  Nft            Nft             @relation(fields: [nft_id], references: [id])

  @@map("nft_activity")
}

model NftTrait {
  id           Int     @id @default(autoincrement())
  attribute    String  @db.VarChar
  value        String  @db.VarChar
  display_type String? @db.VarChar
  nft_id       Int
  Nft          Nft     @relation(fields: [nft_id], references: [id])

  @@map("nft_trait")
}

model CollectionOffer {
  id                 Int      @id @default(autoincrement())
  tx_hash            String   @db.VarChar
  created_date       DateTime @db.Timestamptz(3)
  buyer_address      String   @db.VarChar
  collection_address String   @db.VarChar
  price              Decimal  @db.Decimal(90, 2)
  denom              String   @db.VarChar
  quantity           Int
  current_quantity   Int      @default(0)
  start_date         DateTime @db.Timestamptz(3)
  end_date           DateTime @db.Timestamptz(3)

  @@unique([collection_address, buyer_address, price])
  @@map("collection_offer")
}

model NftOffer {
  id            Int      @id @default(autoincrement())
  tx_hash       String   @db.VarChar
  created_date  DateTime @db.Timestamptz(3)
  nft_id        Int
  price         Decimal  @db.Decimal(90, 2)
  denom         String   @db.VarChar
  buyer_address String   @db.VarChar
  start_date    DateTime @db.Timestamptz(3)
  end_date      DateTime @db.Timestamptz(3)
  Nft           Nft      @relation(fields: [nft_id], references: [id])

  @@unique([nft_id, buyer_address, price])
  @@map("nft_offer")
}

model NftBidding {
  id            Int        @id @default(autoincrement())
  listing_id    Int
  tx_hash       String     @db.VarChar
  created_date  DateTime   @db.Timestamptz(3)
  buyer_address String     @db.VarChar
  price         Decimal    @db.Decimal(90, 2)
  denom         String     @db.VarChar
  Listing       ListingNft @relation(fields: [listing_id], references: [id], onDelete: Cascade)

  @@map("nft_bidding")
}

//repersentthe transfering transactions (fixed_sell, accept_sale, accept_offer, bidding)
model Transaction {
  id                 Int         @id @default(autoincrement())
  txn_hash           String      @db.VarChar
  date               DateTime    @db.Timestamptz(3)
  volume             Decimal     @db.Decimal(90, 2)
  collection_address String      @db.VarChar
  buyer_address      String      @db.VarChar
  seller_address     String      @db.VarChar
  market             Marketplace @default(mrkt)
  Collection         Collection  @relation(fields: [collection_address], references: [address])

  @@index([collection_address])
  @@index([collection_address, date])
  @@map("transaction")
}

model StreamTx {
  id         Int           @id @default(autoincrement())
  date       DateTime      @default(now()) @db.Timestamptz(3)
  tx_hash    String        @db.VarChar
  action     String        @db.VarChar(26)
  is_failure Boolean       @default(false)
  event      Json
  context    StreamContext @default(mrkt)
  message    String?       @db.VarChar

  @@map("stream_tx")
}

model FailureStreamTx {
  id      Int           @id @default(autoincrement())
  date    DateTime      @default(now()) @db.Timestamptz(3)
  tx_hash String        @unique @db.VarChar
  action  String        @db.VarChar(26)
  event   Json
  context StreamContext @default(mrkt)
  message String?       @db.VarChar

  @@map("failure_stream_tx")
}

model MissingStreamBlock {
  id      Int           @id @default(autoincrement())
  height  String        @db.VarChar
  context StreamContext

  @@map("missing_stream_block")
}

model Config {
  key   String @id @db.VarChar
  value String @db.VarChar

  @@map("config")
}

model CollectionSnapshot {
  id                 Int      @id @default(autoincrement())
  collection_address String   @db.VarChar
  date               DateTime @default(now()) @db.Timestamptz(3)
  floor              Decimal  @db.Decimal(90, 2)
  volume_of_24h      Decimal  @db.Decimal(90, 2)

  @@index([date])
  @@index([collection_address, date])
  @@map("collection_snapshot")
}

model LaunchpadCollection {
  collection_address    String      @id @db.VarChar
  admin                 String
  name                  String      @db.VarChar
  symbol                String      @db.VarChar
  supply                Int
  token_uri             String      @db.VarChar
  royalty_percent       Int
  royalty_wallet        String      @db.VarChar
  next_token_id         Int
  iterated_uri          Boolean     @default(false)
  start_order           Int         @default(1)
  frozen                Boolean     @default(false)
  hidden_metadata       Boolean     @default(false)
  placeholder_token_uri String?     @db.VarChar
  withdraw_address      String      @db.VarChar
  MintGroup             MintGroup[]
  start_time            DateTime?   @db.Timestamptz(3)
  end_time              DateTime?   @db.Timestamptz(3)
  banner                String[]
  avatar                String      @db.VarChar
  description           String?     @db.VarChar

  @@map("launchpad_collection")
}

view LaunchpadCollectionView {
  collection_address    String  @id @db.VarChar
  admin                 String
  name                  String  @db.VarChar
  symbol                String  @db.VarChar
  supply                Int
  token_uri             String  @db.VarChar
  royalty_percent       Int
  royalty_wallet        String  @db.VarChar
  next_token_id         Int
  iterated_uri          Boolean @default(false)
  start_order           Int     @default(1)
  frozen                Boolean @default(false)
  hidden_metadata       Boolean @default(false)
  placeholder_token_uri String? @db.VarChar
  withdraw_address      String  @db.VarChar

  start_time   DateTime? @db.Timestamptz(3)
  end_time     DateTime? @db.Timestamptz(3)
  banner       String[]
  avatar       String    @db.VarChar
  description  String?   @db.VarChar
  total_minted Int

  @@map("launchpad_collection_view")
}

model MintGroup {
  id                 Int                 @id @default(autoincrement())
  collection_address String              @db.VarChar
  name               String              @db.VarChar
  whitelist          String[]
  max_tokens         Int
  mint_price         Decimal             @db.Decimal(90, 2)
  creators           String              @db.VarChar
  start_time         DateTime?           @db.Timestamptz(3)
  end_time           DateTime?           @db.Timestamptz(3)
  Collection         LaunchpadCollection @relation(fields: [collection_address], references: [collection_address])

  @@index([collection_address])
  @@map("mint_group")
}

model MintInfo {
  id                 Int    @id @default(autoincrement())
  collection_address String @db.VarChar
  group_name         String @db.VarChar
  recipient          String @db.VarChar
  token_id           String

  @@unique([collection_address, group_name, recipient, token_id])
  @@map("mint_info")
}

model UserLoyaltyPoint {
  id             Int              @id @default(autoincrement())
  wallet_address String           @db.VarChar
  date           DateTime         @db.Timestamptz(3)
  kind           LoyaltyPointKind
  point          Int

  @@map("user_loyalty_point")
}

view CollectionView {
  address       String    @id
  name          String
  symbol        String
  royalty       Decimal?  @db.Decimal(90, 2)
  image         String?
  banner        String?
  description   String?
  socials       Json?
  supply        Int
  highest_bid   Decimal?  @db.Decimal(90, 2)
  listed        Int
  sales         Int
  minted_date   DateTime?
  volume        Decimal   @db.Decimal(90, 2)
  floor_price   Decimal   @db.Decimal(90, 2)
  volume_of_1h  Decimal   @db.Decimal(90, 2)
  volume_of_24h Decimal   @db.Decimal(90, 2)
  volume_of_7d  Decimal   @db.Decimal(90, 2)
  volume_of_30d Decimal   @db.Decimal(90, 2)

  @@map("collection_view")
}

enum NftActivityKind {
  list
  delist
  sale
  make_offer
  cancel_offer

  @@map("nft_activity_kind")
}

enum LoyaltyPointKind {
  sell
  buy
  bid
  xp

  @@map("loyalty_point_kind")
}

enum SaleType {
  fixed
  auction

  @@map("sale_type")
}

enum StreamContext {
  mrkt
  pallet
  cwr721
  launchpad

  @@map("stream_context")
}

enum Marketplace {
  mrkt
  pallet

  @@map("marketplace")
}
